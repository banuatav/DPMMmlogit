// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// log_dmvnorm_arma_mult
arma::vec log_dmvnorm_arma_mult(arma::mat x, arma::mat mean, arma::mat sigma);
RcppExport SEXP _DPMMmlogit_log_dmvnorm_arma_mult(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_dmvnorm_arma_mult(x, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// log_dmvnorm_arma_sing
double log_dmvnorm_arma_sing(arma::vec x, arma::vec mean, arma::mat sigma);
RcppExport SEXP _DPMMmlogit_log_dmvnorm_arma_sing(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_dmvnorm_arma_sing(x, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// invHess
arma::mat invHess(arma::mat B, arma::vec y_k, arma::mat R_k, arma::mat betaMat, int J);
RcppExport SEXP _DPMMmlogit_invHess(SEXP BSEXP, SEXP y_kSEXP, SEXP R_kSEXP, SEXP betaMatSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y_k(y_kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R_k(R_kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betaMat(betaMatSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(invHess(B, y_k, R_k, betaMat, J));
    return rcpp_result_gen;
END_RCPP
}
// rmvnormrcpp
arma::mat rmvnormrcpp(int n_, arma::vec mu_, arma::mat sigma_);
RcppExport SEXP _DPMMmlogit_rmvnormrcpp(SEXP n_SEXP, SEXP mu_SEXP, SEXP sigma_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_(n_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_(sigma_SEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnormrcpp(n_, mu_, sigma_));
    return rcpp_result_gen;
END_RCPP
}
// rmvnormrcpp_chol
arma::mat rmvnormrcpp_chol(int n, arma::vec mu, arma::mat col_sigma);
RcppExport SEXP _DPMMmlogit_rmvnormrcpp_chol(SEXP nSEXP, SEXP muSEXP, SEXP col_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type col_sigma(col_sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnormrcpp_chol(n, mu, col_sigma));
    return rcpp_result_gen;
END_RCPP
}
// chol_rcpp
arma::mat chol_rcpp(arma::mat matrix);
RcppExport SEXP _DPMMmlogit_chol_rcpp(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_rcpp(matrix));
    return rcpp_result_gen;
END_RCPP
}
// riwish_rcpp
arma::mat riwish_rcpp(double nu, arma::mat upsilon);
RcppExport SEXP _DPMMmlogit_riwish_rcpp(SEXP nuSEXP, SEXP upsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type upsilon(upsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(riwish_rcpp(nu, upsilon));
    return rcpp_result_gen;
END_RCPP
}
// riwish_rcpp_chol
arma::mat riwish_rcpp_chol(double nu, arma::mat chol_inverse_upsilon);
RcppExport SEXP _DPMMmlogit_riwish_rcpp_chol(SEXP nuSEXP, SEXP chol_inverse_upsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type chol_inverse_upsilon(chol_inverse_upsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(riwish_rcpp_chol(nu, chol_inverse_upsilon));
    return rcpp_result_gen;
END_RCPP
}
// logdiwish_rcpp
double logdiwish_rcpp(double nu, double upsilon, arma::mat Draw);
RcppExport SEXP _DPMMmlogit_logdiwish_rcpp(SEXP nuSEXP, SEXP upsilonSEXP, SEXP DrawSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Draw(DrawSEXP);
    rcpp_result_gen = Rcpp::wrap(logdiwish_rcpp(nu, upsilon, Draw));
    return rcpp_result_gen;
END_RCPP
}
// prob_mlogit
arma::mat prob_mlogit(arma::mat beta, arma::mat R_p);
RcppExport SEXP _DPMMmlogit_prob_mlogit(SEXP betaSEXP, SEXP R_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R_p(R_pSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_mlogit(beta, R_p));
    return rcpp_result_gen;
END_RCPP
}
